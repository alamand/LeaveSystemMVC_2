@model LeaveSystemMVC.Models.sEmployeeModel
@{
    ViewBag.Title = "Add Staff Member";
}
@Html.Partial("_LeftMenu")

<div class="col-md-10">
    <h2>@ViewBag.Title</h2>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        <div class="col-md-10">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="text-muted bootstrap-admin-box-title">Application Details</div>
                </div>
                <div class="bootstrap-admin-panel-content">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <!--contains staff ID-->
                        <div class="row">
                            <div class="col-md-2" style="white-space:nowrap">
                                @Html.LabelFor(model => model.staffID, "Staff ID", htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.staffID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.staffID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />

                        <!--contains first and last name-->
                        <div class="container-fluid form-group">
                            <div class="row">
                                <div class="col-xs-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.firstName, "First Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-xs-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.lastName, "Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <hr />

                        <!-- contains phone number and user name-->
                        <div class="container-fluid form-group">
                            <div class="row">
                                <div class="col-xs-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.phoneNo, "Phone Number", htmlAttributes: new { @class = "control-label col-md-3" })
                                </div>

                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.phoneNo, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.phoneNo, "", new { @class = "text-danger" })
                                </div>


                                <div class="col-xs-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.userName, "User Name", htmlAttributes: new { @class = "control-label col-md-1" })
                                </div>

                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.userName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.userName, "", new { @class = "text-danger" })
                                </div>

                            </div>
                        </div>
                        <hr />

                        <!--contains gender-->
                        <div class="row">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.gender, "Gender", htmlAttributes: new { @class = "control-label col-md-3" })
                            </div>

                            <div class="col-md-4">
                                <select class="form-control" id="gender" name="gender">
                                    <option value="M">Male</option>
                                    <option value="F">Female</option>
                                </select>
                            </div>

                            <div class="col-sm-2" style="white-space:nowrap">
                                @Html.LabelFor(model => model.dateOfBirth, "Date of Birth", htmlAttributes: new { @class = "control-label col-md-2", type = "Date" })
                            </div>

                            <div class="col-md-4">
                                @Html.EditorFor(model => model.dateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.dateOfBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />

                        <!--contains email-->
                        <div class="row">
                            <div class="col-md-2" style="white-space:nowrap">
                                @Html.LabelFor(model => model.email, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                            </div>

                            <div class="col-md-4">
                                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />

                        <!--contains nationality and religion-->
                        <div class="container-fluid form-group">
                            <div class="row">
                                <div class="col-sm-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.nationalityID, "Nationality", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.nationalityID, new SelectList(@ViewData["NationalityList"] as Dictionary<int, string>, "Key", "Value"), "- Select Nationality -", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.nationalityID, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-sm-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.religionID, "Religion", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.religionID, new SelectList(@ViewData["ReligionList"] as Dictionary<int, string>, "Key", "Value"), "- Select Religion -", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.religionID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <hr />

                        <!--contains designation and department name-->
                        <div class="container-fluid form-group">
                            <div class="row">
                                <div class="col-sm-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.designation, "Designation", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.designation, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.designation, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-sm-2" style="white-space:nowrap">
                                    @Html.LabelFor(model => model.deptID, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>

                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.deptID, new SelectList(@ViewData["DepartmentList"] as Dictionary<int,string>, "Key", "Value"), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.deptID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <hr />

                        <!--contains start date and report to-->
                        <div class="row">
                            <div class="col-sm-2" style="white-space:nowrap">
                                @Html.LabelFor(model => model.empStartDate, "Start Date", htmlAttributes: new { @class = "control-label col-md-2", type = "Date" })
                            </div>

                            <div class="col-md-4">
                                @Html.EditorFor(model => model.empStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.empStartDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-sm-2" style="white-space:nowrap">
                                @Html.LabelFor(model => model.reportsToLineManagerID, "Reports To", htmlAttributes: new { @class = "control-label col-md-4" })
                            </div>

                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.reportsToLineManagerID, new SelectList(@ViewData["LineManagerList"] as Dictionary<int,string>, "Key", "Value"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.reportsToLineManagerID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />

                        <!--roles-->
                        <div class="row">
                            <div class="col-sm-2" style="white-space:nowrap">
                                @Html.Label("Role(s)", htmlAttributes: new { @class = "control-label col-md-4" })
                            </div>
                            <div class="col-md-10">
                                <span class="button-checkbox">
                                    @Html.CheckBoxFor(model => model.isStaff, htmlAttributes: new { @class = "hidden" })
                                    <button id="isStaffBtn" type="button" class="btn" data-color="primary">Staff</button>
                                </span>

                                <span class="button-checkbox">
                                    @Html.CheckBoxFor(model => model.isLM, htmlAttributes: new { @class = "hidden" })
                                    <button id="isLMBtn" type="button" class="btn" data-color="primary">Line Manager</button>
                                </span>

                                <span class="button-checkbox">
                                    @Html.CheckBoxFor(model => model.isHR, htmlAttributes: new { @class = "hidden" })
                                    <button id="isHRBtn" type="button" class="btn" data-color="primary">HR</button>
                                </span>

                                <span class="button-checkbox">
                                    @Html.CheckBoxFor(model => model.isAdmin, htmlAttributes: new { @class = "hidden" })
                                    <button id="isAdminBtn" type="button" class="btn" data-color="primary">Admin</button>
                                </span>

                                @if (false.Equals(@ViewData["HRRExists"]) || true.Equals(Model.isHRResponsible))
                                {
                                    <span class="button-checkbox">
                                        @Html.CheckBoxFor(model => model.isHRResponsible, htmlAttributes: new { @class = "hidden" })
                                        <button id="isHRRBtn" type="button" class="btn" data-color="primary">HR Responsible</button>
                                    </span>
                                }
                            </div>
                        </div>
                        <hr />

                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-10">
                                <input type="submit" value="Submit" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @if (ViewBag.SuccessMessage != null)
    {
        <script>
            $(document).ready(function () {
                alert('@ViewBag.SuccessMessage');
            });
        </script>
    }

    <script>
        $(document).ready(function () {
            $('#isLMBtn, #isHRBtn, #isHRRBtn').prop("disabled", true);
        });

        $('#isStaff').change(function () {
            if ($(this).is(':checked')) {
                $('#isLMBtn, #isHRBtn, #isHRRBtn').prop("disabled", false);
            }
            else {
                $('#isLMBtn, #isHRBtn, #isHRRBtn').prop("checked", false);
                $('#isLMBtn, #isHRBtn, #isHRRBtn').prop("disabled", true);
            }
        });
    </script>

    <script>
        $(function () {
            $('.button-checkbox').each(function () {

                // Settings
                var $widget = $(this),
                    $button = $widget.find('button'),
                    $checkbox = $widget.find('input:checkbox'),
                    color = $button.data('color'),
                    settings = {
                        on: {
                            icon: 'glyphicon glyphicon-check'
                        },
                        off: {
                            icon: 'glyphicon glyphicon-unchecked'
                        }
                    };

                // Event Handlers
                $button.on('click', function () {
                    $checkbox.prop('checked', !$checkbox.is(':checked'));
                    $checkbox.triggerHandler('change');
                    updateDisplay();
                });
                $checkbox.on('change', function () {
                    updateDisplay();
                });

                // Actions
                function updateDisplay() {
                    var isChecked = $checkbox.is(':checked');

                    // Set the button's state
                    $button.data('state', (isChecked) ? "on" : "off");

                    // Set the button's icon
                    $button.find('.state-icon')
                        .removeClass()
                        .addClass('state-icon ' + settings[$button.data('state')].icon);

                    // Update the button's color
                    if (isChecked) {
                        $button
                            .removeClass('btn-default')
                            .addClass('btn-' + color + ' active');
                    }
                    else {
                        $button
                            .removeClass('btn-' + color + ' active')
                            .addClass('btn-default');
                    }
                }

                // Initialization
                function init() {

                    updateDisplay();

                    // Inject the icon if applicable
                    if ($button.find('.state-icon').length === 0) {
                        $button.prepend('<i class="state-icon ' + settings[$button.data('state')].icon + '"></i> ');
                    }
                }
                init();
            });
        });
    </script>
}


